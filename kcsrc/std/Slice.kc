use Mem
	offset-ptr
	undefined
	ptr-size-of
use Iter
	IntoIter(into-iter)
	Iter(next)
	for-each
	zip
use Error
use StrClass
	Str(print-str, length, chars)


# maybe move slice into its own module?
Slice a
	ptr Ptr a
	count Int

# assuming null pointer is 0
empty ():
	Slice { ptr: Mem.zeroed(), count: 0 }

elem-size-of (slice Slice a):
	slice.ptr ptr-size-of()

# When these functions will be in their own module, we won't need the Slice prefix.

get (slice Slice a, i Int) -> a
	if i < 0 or i >= slice.count
		Error.critical('Access to slice at index \(i). (max: \(slice.count))')

	elem = slice.ptr offset-ptr(i)&
	return elem

try-get (slice Slice a, i Int) -> Maybe a
	if i < 0 or i >= slice.count
		return None
	elem = slice.ptr offset-ptr(i)&
	return Just(elem)

set (slice Slice a, i Int, x a) -> Unit
	if i < 0 or i >= slice.count
		Error.critical('Access to slice at index \(i). (count: \(slice.count))')

	elem-ptr = slice.ptr Mem.offset-ptr(i)
	elem-ptr <&= x
	return
	

subslice (slice Slice a, from Int, to Int) -> Slice a
	if from >= slice.count or to > slice.count
		Error.critical('tried to sublice [\(from):\(to)], but slice has \(slice.count) elements')
	

	begin-ptr = slice.ptr Mem.offset-ptr(from)
	count = to - from
	if count < 0
		count <= 0

	return Slice { ptr: begin-ptr, count }

# iterators


SliceIter a
	slice Slice a
	current-offset Int

inst IntoIter Slice a
	into-iter (self):
		SliceIter { slice: self, current-offset: 0 }

inst IntoIter SliceIter a
	into-iter (self): self

inst Iter SliceIter a
	next (self Ptr (SliceIter a)) -> Maybe a
		off = self&.current-offset
		if off + 1 > self&.slice.count
			return None

		elem = self&.slice.ptr offset-ptr(off)&
		self <&.current-offset= off + 1
		return Just(elem)


inst Str Slice a
	print-str (self)
		if self.count == 0
			print-str('[]')
		elif self.count == 1
			one-elem = print-str(get(self, 0))
			print-str('[\(one-elem)]')
		else
			print-str('[')
			print-str(get(self, 0))
			self
				subslice(1, self.count)
				for-each(elem: print-str(', \(elem)'))

			print-str(']')

	# i'll implement other stuff later...

SliceAddressIter a
	slice Slice a
	current-offset Int

addresses (slice Slice a):
	SliceAddressIter { slice, current-offset: 0 }


inst IntoIter SliceAddressIter a
	into-iter (self): self

inst Iter SliceAddressIter a
	next (self Ptr (SliceAddressIter a)) -> Maybe (Ptr a)
		off = self&.current-offset
		if off + 1 > self&.slice.count
			return None

		elem = self&.slice.ptr offset-ptr(off)
		self <&.current-offset= off + 1
		return Just(elem)



copy-to (from Slice a, to Slice a) -> Unit
	if from.count > to.count
		Error.critical('cannot copy to a slice that is smaller! (copying from \(from.count)-element slice to \(to.count)-element slice)')

	from
		zip(Iter.from(0))
		for-each(uncurry((elem, i): set(to, i, elem)))
