 okay, final spec.
 - dependent types (no need to * -> *, plus iterate through bit vectors n shiz)
   - make sure to implement parametrized dependent types (possible to return different composite return types)
 - instance deriving(?????? i dunno, seems a bit like OOP subclassing (including multiple inheritance!!) ... which is not very good, as it forces me to create some sort of hierarchy (especially, when there is none). i would like to avoid it...)
   - this is for iterators, where I want a Functor which maps f a -> f b and a map for Iter which adds a new datatype.
   - or I might just ignore it and separate map() and fmap()????
 > okay, I kinda wanna try it anyway. it's my language, I can remove shit if I want.
 - default implementations
   - again, for iterators and while deriving...
 - mutually recursive definitions???? or should I just put IntoIter's it() into Iter?
 - (that's more general, not only in typeclasses) return typeclasses (in a hiding implementation sort of way, but also... how do they behave in typeclasses? I mean, it's obvious, but how to implement it atop my type inference? hmmmmmm which is better. (see example IntoIter))
 - multi parameter typeclasses?
   - for conversion?
   - or not?? like, make a typeclass for each type, eg. ToI32, ToU32, etc.
   - multi parameter typeclasses shouldn't be hard to implement (same way as struct members), but I think I'll drop them for now. I'll see if I need them later.

 ----------------------------------------
 plan dziaÅ‚ania.
 1. basic typeclass (no dependent types) -> Str (it has only one method and it just consumes it's parameter - super easy.)
 2. dependent types -> Functor typeclass
 (OLD) 3. default implementations -> Iter (i think I'll inlcude IntoIter)
	no need to do default implementations now. But I need instances of other typeclasses tho.
3. Instance parameter is a typeclass

 ---------------------------------------
 Problems in the forseeable future:
 1. local instances
	# local class + local instance
	some-fn () -> Int
		class Dupa
			dupa (self _) -> Unit
		inst Dupa Int
			dupa (self _) -> Unit
				if self == 0
					print 'dupa'
				else
					print self

		x = 69
		dupa(x)

		return x

	# shoud fail!!!
	# dupa(x)  (undefined reference to 'dupa')


	# local instance
	some-fn () -> Int
		inst Dupa Int
			dupa (self _) -> Unit
				print 'dupa'

		x = 69
		dupa(x)  # okay.

	# should fail!!!
	dupa(x)


	# redefining local instance
	some-fn () -> Int
		x = 69
		inst Str Int
			print-str (self _) -> Unit
				print 'dupa'

		print-str(x)  # 'dupa' ??
		return x

	x = some-fn()
	print-str(x)  # 69


	# what happens if two instances are imported?
	# error. orphan instance shit.
	

