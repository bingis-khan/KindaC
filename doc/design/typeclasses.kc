 okay, final spec.
 - dependent types (no need to * -> *, plus iterate through bit vectors n shiz)
   - make sure to implement parametrized dependent types (possible to return different composite return types)
 - instance deriving(?????? i dunno, seems a bit like OOP subclassing (including multiple inheritance!!) ... which is not very good, as it forces me to create some sort of hierarchy (especially, when there is none). i would like to avoid it...)
   - this is for iterators, where I want a Functor which maps f a -> f b and a map for Iter which adds a new datatype.
   - or I might just ignore it and separate map() and fmap()????
 > okay, I kinda wanna try it anyway. it's my language, I can remove shit if I want.
 - default implementations
   - again, for iterators and while deriving...
 - mutually recursive definitions???? or should I just put IntoIter's it() into Iter?
 - (that's more general, not only in typeclasses) return typeclasses (in a hiding implementation sort of way, but also... how do they behave in typeclasses? I mean, it's obvious, but how to implement it atop my type inference? hmmmmmm which is better. (see example IntoIter))
 - multi parameter typeclasses?
   - for conversion?
   - or not?? like, make a typeclass for each type, eg. ToI32, ToU32, etc.
   - multi parameter typeclasses shouldn't be hard to implement (same way as struct members), but I think I'll drop them for now. I'll see if I need them later.

 ----------------------------------------
 plan dziaÅ‚ania.
 1. basic typeclass (no dependent types) -> Str (it has only one method and it just consumes it's parameter - super easy.)
 2. dependent types -> Functor typeclass
 (OLD) 3. default implementations -> Iter (i think I'll inlcude IntoIter)
	no need to do default implementations now. But I need instances of other typeclasses tho.
3. Instance parameter is a typeclass

 ---------------------------------------
 Problems in the forseeable future:
 1. local instances
	# local class + local instance
	some-fn () -> Int
		class Dupa
			dupa (self _) -> Unit
		inst Dupa Int
			dupa (self _) -> Unit
				if self == 0
					print 'dupa'
				else
					print self

		x = 69
		dupa(x)

		return x

	# shoud fail!!!
	# dupa(x)  (undefined reference to 'dupa')


	# local instance
	some-fn () -> Int
		inst Dupa Int
			dupa (self _) -> Unit
				print 'dupa'

		x = 69
		dupa(x)  # okay.

	# should fail!!!
	dupa(x)


	# redefining local instance
	some-fn () -> Int
		x = 69
		inst Str Int
			print-str (self _) -> Unit
				print 'dupa'

		print-str(x)  # 'dupa' ??
		return x

	x = some-fn()
	print-str(x)  # 69


	# what happens if two instances are imported?
	# error. orphan instance shit.
	

Okay nigga
So:
1. Shadowing instances
2. Local instances possible. Only accessible to the scope they are in. Because environment also needs to be there, yo.
3. Instance selection stuff....... look

	inst Str Int  # 1
		print-str (x Int)
			print 'dupa'

	print-int (n Int)
		print-str(n) # selects instance #1

	f ()
		inst Str Int  # 2
			print-str (x Int)
				print 'aaaaa'

		x = 123
		print-str(x)  # 'aaaaa' (selected #2, because this is what was bound here at the time of declaration)
		print-int(x)  # 'dupa' (selected #1, because this is what was bound at the time of declaration)
		
	f()

Makes sense. now
	inst Str Int  # 1
		print-str (x Int)
			print 'dupa'

	print-string-i-guess (s)  # type is (in Haskell terms): Str s => s -> Unit
		print-str(s)

	f ()
		inst Str Int  # 2
			print-str (x Int)
				print 'aaaaa'

		x = 123
		print-str(x)  # 'aaaaa'
		print-string-i-guess(x)  # ?????? what should this print???????

		# if 'dupa'
			then i guess it is superficially similar to the first one, but how would this work??
			like, if we define a different function somewhere else and it won't have access to the same instances???
			then functions and class functions would have different behaviors
			and we would have to add class functions to the declaration itself to have this kind of extensible behavior.
			Okay, technically we can preserve it by implicitly associating inferred typeclasses with their associated instances.
			however, the problem is extensibility. so I think I'm not gonna do it like this.
		# if 'aaaaa'
			then more logical resolution... or not
			i guess i could dub the behavior as instance selection based on use.
			where the instance is selected at the place of tvar application

			I'm gonna choose this based on extensibility.
			PITFALL: I want to make switching from datatypes to typeclasses seamless for the sake of strings. This WILL be impacted by it though. Because if Str was a typeclass, it would have different "overloading" behavior than if it was a datatypes

		# THIRD FUNNY OPTION
			In the first and second code sample, both would print 'aaaaa'
			Instance is selected based on scopes and execution.
			However, it leads to very funny behavior, where you can accidentally change function behavior without knowing it if they use a typeclass.

				print-int(123)  # 'dupa'
				inst Str Int
					# ...
				print-int(123)  # 'aaaaa'

			This is unacceptable...


		# The first one is easier to implement with my scheme... ah, but fuck, it needs to know which types will be applied to it beforehand, so as to actually check which instance gets selected. RemoveUnused might be a place for that.

		# The second one is the correct choice. But I need to present it better.
		# The basic rule is: whenever an instantiation resolves to a concrete type, select an instance then.

	f()


Another look that might clear the situation up?

	f ()
		class Dupa a
			to-int (self _)

		inst Dupa Bool
			to-int (self _)
				return 42

		return x: to-int(x)

	ff = f() as a: Dupa -> Int  # what the FUCK is this? how do we deal with local typeclasses? like, what's even supposed to happen here? type is going to be generalized.. with Dupa.
	# okay, so

	f () -> (a: Dupa -> Int)  # (however, dupa is inaccessible, thus we are not able to create any more instances of it.)

	# so:
	ff as Bool -> Int  # okay.
	ff as Int -> Int   # compiler error.

	# hmmm. so, we must somehow check which instances does this stuff have.

Anonymous typeclasses! HOW!

######################
# I CHOOSE: the second choice. Instance selection based on instantiation!
######################

AAAAAAAAAAAAAAA: sheeesh. 
The thing is... when do we instantiate?

# module Dupsko
mk-tuple (): Tuple(1, True)


# module Main
inst Str Tuple l r <= Str l, Str r
	print-str ()
		# ....

n = Dupsko.mk-tuple()  # wtff. clearly, we should use the instance from here, but... the type gets instantiated in Dupsko, so it won't have access to this instance.
# huh, maybe we can do it differently. when function gets instantiated to a type it gets assigned. but, how do we ... implement it?
# how should I do it?
# like, how do I attach information during instantiation?? especially, that it's done during resolving.
# i mean, not instantiation. like, when type gets actually inferred. ahhhh

inst 1
constr
inst 2
app # inst 2? inst 1?
What's the correct answer here?


f (x s) -> Unit <= Str s
	print-str(x)


or this?
inst Int # 1
mk-int (): 69
inst Int # 2
mk-int2 (): mk-int()
inst Int # 3
mk-int3 (): mk-int2()

Which instance gets selected???
I think, it should be 3.

inst Int # 1
mk-int ()
	x = 69
	print-str(x) # 1
	return x

inst Int # 2
mk-int2 ()
	x = mk-int()
	print-str(x) # 2
	return x

inst Int # 3
mk-int3 ()
	x = mk-int2()
	print-str(x) # 3
	return x

print-str(mk-int())  # 3!
print-str(mk-int3()) # 3!

okay, see instance-resolution.kc



08.03.25: Okay, kind of implemented (without generalization tho - no constraints of any kind yet.)

How would TYPECLASS constraints look/parse like?

I want this: Str a, Str b => Str Tuple a b

class Str
	print-str (self _) -> Unit

inst Str Tuple a b <= Str a, Str b
	print-str (Tuple(l, r) Tuple a b) -> Unit
		print-str(l)
		print-str(r)

print-tuple (Tuple(l, r) Tuple a b) -> Unit | Str a, Str b
	pass

print-tuple [Str a, Str b] (Tuple )

print-tuple (Tuple(l, r) Tuple a b) <= Str a, Str b: 123
 
