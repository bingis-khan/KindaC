This is stuff for the next rewrite:

- GHC-style phases

- Move debug printing functions down or outside, as they clutter everything. (might do it very very soon anyway).


Okay, I think I'm closer to what I want to do.
Should I eliminate class functions during typechecking? It's possible and might actually be better.

 - right now, out architecture allows us to do this during Mono, but that is probably not great.



LETS DO A REWRITE, I CANT ANYMORE.

The stuff that's left to implement is:

 - nonlocal instances and their environments.
 - late instantiation for environments.
 - declared associated types

plus all the other known stuff like:
 - recursion
 - pointers
 - recursive datatypes
 - size tvars (no arithmetic or anything, just this)
 and other shiz



-------------------------

Parser
 |
Resolver
 > resolve names, exports and shiz. it'll still be a different phase from typecheck, but maybe not for long
 |
Typecheck
 > typechecking, should remove typeclasses, also should do partial environment initialization.
  > EDIT: constrained tvars *will* exist, but only bound by declaration. all other should be resolved.
 Actual Typecheck (including instantiations)
 | <- this should produce a "Module" datatype, which contains both the code and exports (remember to also export typeclasses!)
[Export] <- the "Module" datatype, not actually a step.
 |
Fixup
 > it cannot be fused with Typecheck. Typecheck is module-based, but to, for example, finish all env defs, we must know *all* of the program.
 Remove Typeclasses step (this is controversial, but it'll simplify Mono. right know I just want to finish this shiz)
  > EDIT: kinda hard. the problem is associating the instance AND its applied assoc types to the class function. see belooooow.
 > Currently, I think locking in EnvDefs should happen here, as we will already have access to all instances. 
 |
Mono
 > must monomoprhize and map the "cucked unions", unions, which contain TVars from nested functions.
 Incomplete Mono
 Full Mono
 |
C Printer (not changed)
 

--

What about environment "fix ups"? This happens, when the instance function makes use of functions defined earlier.

An example:

sumtin (x, y)
 inst ToStr StrConcat l r
  to-str(StrConcat(l, r))
   # to cement the fact that this is an inner function.
   print x
   print y # part of environment
   return to-str(l) <> to-str(r)

  return to-str(StrConcat(x, y))
#[partial 'sumtin' envdef]

inst ToStr Int, Bool, Unit  # instance definitions omitted
#[inst envdef]
#[completed 'sumtin' envdef]

sumtin(1, True)
sumtin(Unit, Unit)

This also cannot be done during simple Typechecking. We need to know all callers of this function.
Let's do it the simple way for now, where each function env def has "dependencies" listed, after which it should be completed.
Should this be a separate pass?

---- 


I imagine we have typechecking done.
The typechecking part also can leave an "asymetrical" AST -> I know all env defs inside function scopes and such will not depend on the outer scope.
 Thus, the inner part of the function can have a slightly different AST, where env defs are already "taken care of" and so it'll be easier to "fixup" later.
So, Typechecking might have a function type like: T.Fun (T.FunDec) (NonEmpty Fixup.Stmt)

In Fixup, we need to collect all top level instantiations. We have to go through the code and replace EnvDefs.
 > NOTE: all top level env defs' types will be MONOMORPHIC - they should not have any TVars.
 > NOTE NOTE: However, inside unions, it's still possible, as they can refer to variables, which refer to inner functions.

Fixup will also serve as a way to "remove unused".
Second, (probably should do it at the same time) add EnvDef completions, as we're gonna have enough info for us to do this. Just use Deps = Set EnvID or Deps = Set (EnvID, Type)
 > NOTE: should we already create different environments then? Because "completing" environments is different for each applied type.
  > Well, shouldn't we monomorphize it then at this point? I mean... it's kinda similar. When it comes to cucked unions, we can technically count all instantiations of a function those TVar is assigned to it. Eh, I'll see.
 > PROBLEM: what if the defined environment is not yet completed? Probably only mark it as completed when it's fully completed. Yuh.



----

Notes from the rewrite

It's taking longer than expected, but looks okay.

I've found a certain pattern: there is stuff which is only available after we do resolving (which will probably stay the same for later phases), but we're making another type family for it. Maybe a better way would be to make a type family Other and like Rec just make it () during Parsing and 'a' from Resolving onwards.

I will first do all the phases to see if it holds up.


==========

okay, in practice it does not hold up that well... or at all. i'll have to think of more passes or something.

....

The big problem, the million dollar question is getting to associate an instance PLUS its applied types with a specific place in the AST.
Or rather, in which circumstances does it even work and is fully robust?

so basically, we have to FIND a specific place and substitute the function with it.
it also needs to be recursive - some assocs might depend on a type from outside! we have to handle those cases as well.

- the env mapping approach might be possible: do not substitute AST, just substitute the environment. The top level environment will have no TVars (*most likely*, remember the tvar expansion case), so it should "just" work.
- also, we need them to be recursive.
  - i tried the scopesnapshot approach, where I just pipe the scope snapshot through the whole thing (if it's not initialized).
  - this seems to BE CORRECT, but I have no way of getting the assocs (despite being able to select the instance itself!)
  - maybe the correct way would be to substitute them at some specific point (like generalization), which makes the whole thing correct?
- The problem is: how do we substitute them WITH assocs?
 also, how "low" do we have to go?

  - we have to make sure the "uppermost" layer is substituted. we must also substitute *inside* other functions.
  - we have the same ClassInstanceAssocs
  - we can recursively do this ting. but, the problem i had before is: how do i even distinguish two different pairs of UFI and type, if they have the same type, but may use different instances?

  - omg.... i can just add assocs to the environment.... aside from UFI.
  - yes, that was the way.


ff (x)
 as-bool(x)

f <= ff(123)
inst AsBool Bool
 ....
f <= ff(123)  # different environments for AsBool!!!!!!!



--------------------

Okay, now it kinda works. Now the two things:

 - nonlocal instances and their environments.
 - late instantiation for environments.

 The first one: I think I can just put it in Subst. VERY BAD. VERY UGLY. But it MIGHT JUST WORK YO.
 Also, maybe I should think about a more GENERAL Substitutable class, as we need to do a lot of substitutions for different reasons.


 Why do we want to put it in substitutable? Because the type MIGHT become known AT THE END of the program. This would need updates for the whole file. This would be what substitutable is for.

 Okay, the algorithm.
 I've added Level to FromEnvironment for this.

 1. For each ClassFunctionDef, we check if the selected instance is a TCon or not.
 2. If it is, put the instance function environment inside the current environment.
  2.1: Get all variables (including their types) from the current environment.
  2.2: Get all variables from the function's *instantiated env* and filter them by level and map the FromEnvironment to Local if level is the same.
  2.3: Remove used variables from this new part of environment.
  2.4: Create "DefinedFunction" for this.

This actually worked! But now the second problem - local class, local instance. (which I didn't have before. it didn't work the last time, because it was a bug.)
 This is because there are no explicit instances, so nothing gets added to the environment. So, there is nothing to expand.


Okay, I fixed that also!
I created a second constructor for TypeSubstitution to utilize the Substitution instances. (it leads to some unsafe deconstructions in code, but i don't mind - EnvAddition (the new constructor) is used only once and at the end)
This one adds stuff to the environments. We run it at the end to add those additional variables.
It uses two new fields in TypecheckingState: envStack [EnvID] (to know to which environments to add to, also "level" is implied) and envAdditions EnvAdditions (this just collects the whole env additions thing.)
At the end, before the final substitution, we substitute the EnvAddition with the pre-final substitution. then we substitute statements with EnvAddition and we also have to do that to make the last substitution to substitute environments INSIDE env unions.
I believe in some cases there might still be some tyvars left over in stmts, but now the last substitution has no tyvars, thus the last subsitution will remove all tyvars in case of a correct program.

 Also, this actually takes care of "reinstantiating" the environment of an instance. So, now that last piece of code just returns an empty list instead of reinstantiated vars, because they will be added by EnvAdditions. This is obviously spaghetti as it grew naturally and I should redesign/rewrite it. That's a TODO.

 Another thing is that I had a bug, because we are not memoizing stuff in `subst`, so recursive definitions are ignored and not "substed". This is obivously bad.
 One of the reasons to add memoizing when I'm gonna be optimizing this shiz. This will probably be the cause of more subtle bugs if I don't remember to NOT use the recursive types for more than equality.


OKAY, THIS PART LOOKS LIKE IT IS FINISHED. NEXT: LATE INITIALIZATION!
 (curiously, I didn't need to add any additional compiler phases, so I might have just wasted a month of effort... at least, printing stuff is much better as I don't have to worry... this seems like a better architecture! maybe....)
 ((to be frank, I the types are too general and don't really "reflect" my assumptions about code, so it might change in the future.))
 (((AAAAAAAH, but still. it seems like it wasn't worth itttt kill meeee.)))
 ((((if i were to start with a new project, should i make a more general architecture or a simpler one?!??!?!? asjdlksajdlkjalksjdlkajskdjkalsjdkasdlk ajslkdjlkashdlkhsalkdh lksahdlk hsaklhdksahd hlksahd lkas lsad kjsafdalkj lkjfalkjsfd i  am reatard i am wood))))
