# Intermodule compilation (or, should Typed be replaced with TyVared)

Because environments of functions can proliferate outside of module scope, we must sometimes apply substitution outside of the module.


## Env bloat

Right now, have conversion functions to hopefully prevent bloat:

x = n: n + 1

m = 420
y = x if random() else n: n + m  # this is what it looks like. We would have to change the env union of the `x` function to {[], [m]}

these changes can easily proliferate and increase the overall size of every call.

but we can use the env conversion function.

# ...

y = convert-to-y-env(x) if random() else n: n + m


now, the x env union will be {[]}


## Interlude

note, that these changes proliferate only, because we are dealing with variables, which are not polymorphic (right now! ref: graveyard)
if `x` (from the previous example) was a function, it would create an instance for each call, which would stop this environment proliferation.

so, functions are easy to export from a module, but not variables, because we would have to "resubstitute" environments again and again.

functions - easy
variables - hard

I originally planned for the language to not be able to export variables from modules (and, if so, only immutable ones), but due to recent changes of my design...
  >> also, a function could modify the variable, so I would still have this problem

what if we combine them?


## combining top level variables and functions

imagine this module


# module global.kc
export get-global, use-global

global =& 0

get-global () -> Int
	return global&  # & postfix is dereference

set-global (x Int)
	global <&= x  # <&= operator writes the value at the given address. eg. *a = b;


# Despite not directly exporting a variable, it interacts with it. Which is okay! Imagine default configurations and such. That's how I imagine them to be!

# module main.kc

use global
	set-global
	get-global

set-global(69)
print get-global()


But... what if we make the type polymorphic?


## Breaking the boundary

# module global.kc

export get-global, use-global


global =& : 1  # f() = 1

get-global () -> () -> Int
	return global&

set-global (x () -> Int)
	global <&= x


# module main.kc

use global
	get-global
	set-global

m = 420
set-global(:m)
print get-global()()  # env [m]

n = 3
f = n + m
set-global(f)
print get-global()()  # env [n, m]


Together, the union is {[], [m], [m, n]}. And... we have to change the types in the 'global' module. Now, the `global` variable in global.kc must have this union type. So we have to revisit our previous module and do fun substitutions there.

It can be even more extreme. 

# module a.kc
aaa = 123
set-global(:aaa)

# module b.kc
set-global-to-bbb ()
	bbb = 456
	set-global(:bbb)


!!! other modules can also expand that environment!!!

!!! So, together, the env union for `global` will be: {[], [m], [m, n], [aaa], [bbb]}

And there's another problem here!

If these files are in the project, but their functions are not used (a library, for example, where all of it has to be parsed, but you may use only a subset of available functions)
!!! you ideally would subtract the environment addition of unused functions.


So, if we used the library b.kc, but would not call their function `set-global-to-bbb`, `bbb` should not be included in the union ({[], [m], [m, n], [aaa]} - without bbb)

I see a few possible solutions:
	1. remove unused functions during the Resolve phase.
	2. keep track of which environments are from which functions. If they are unused, remove them during the Monomoprhization phase (which currently does the deduplication)

1.
	I thought it would be hard to do, but not really! We have all the connections we need during that phase! So we know all of the dependencies!
	The only problem is that it would be hard to do separate compilation steps per file... which I already ruled out during the design!!

	The type would be: Module Resolved -> [Stmt Resolved]
	
		- basically turn all the modules and files into a single file, which then will be typechecked! this can also be easily parallelized!

	The functions will then already be grouped by their calls, so the only thing left will be (concat . map) in both typechecking and monomorphization!
	Oh shid, I wanted to do 2, but 1 seems simpler.

	But module separation - if a variable is undefined in a file, it should throw an error. Other modules being included should not impact this. 
	So, the type for Typecheck should roughly be like :: [(String, [Stmt Resolved])] -> [Stmt Typed]
	One other thing is...

	NOOOOOO. After writing it, I realized I can't do it like this. We can remove *some* functions technically, but these unused functions might aid in typechecking....
		So, the best we can do is remove functions that are totally disjoint, which *might* help...
		!! But we want to typecheck unused functions anyway due to possible errors on user's part to inform them !!

	But the idea of ordering them during resolve time is good - we're just going to pass all of the modules to the Typechecker and we'll be able to remove all the extra code for handling imported stuff.

2.
	It's more natural to do here. When functions are generated, we have to first visit their call site. And based on the types, we generate the functions and look at the callsites inside recursively.
		This automatically removes unused functions, because we won't find its callsite anyway!
	But the Resolving step already has the necessary information. Also, it may be cheaper, because typechecking takes by far the most time.

	But it's required - see 1.



# Should I make new env unions while monomorphising?

Motivating example:

g =& :1

f (x a)
	ff ()
		print x
		return 69

	g <&= ff


print g&()
f(123)
print g&()
f(True)
print g&()


Yes.

Env union after typechecking:
{ [], [x a] }

Env union after monomorphization:
{ [], [x Int], [x Bool] }



# Manual memory management and environments

Motivating example????

List a
	alloc Allocator
	# ....
	storage SizedArray a

add (list Ptr (List a))  # in practice, List would probably be an actual object tho, because writing Ptr is annoying?
	# .. this is the case where we have to increase the size
	storage = list&.storage
	new-size = storage.size * 2
	new-storage = alloc-sized-array(list&.alloc, new-size) as SizedArray a  # it's unified here either way! So... it should work?

	new-storage copy-from(storage)
	list&.alloc free(storage)
	list <&.storage= new-storage



# Repeating TVars!

x =& :1


f (n a)
	ff ()
		print n
		return 69
 
	x <&= ff

g (m a)
	gg ()
		print m
		return 420

	x <&= gg

I'll just treat them as variables! So, a TVar will be a: TV { Unique, Name }


Okay, right now - no conversion functions. Env Union will be unified with every variable n shit. But I'll have to figure out the rules soon.


1. THE REQUIRED

 1. Mark outside unions and inside unions - inside unions will always be replaced by outside unions
    a. outside unions are assigned to variables. either assigned to or variables you use. they should probably become marked "outside" when entering a new type context (eg. entering a function)
	b. inside are always on defined types (which are unable to represent any environment)
 2. Instantiate inside unions. Do not instantiate outside unions. When unifying an outside union with inside union, it becomes an outside union.
 3. Some extra stuff: "outside" is relative:

		f (fx)
			x = fx  # 2. here x union is inside, fx is also inside
			ff (ffx () -> Int)
				x = ffx  # 1. here: ffx union is inside; x union is outside

		# 3. f (fx) - the fx parameter has is inside, so any call would instantiate it.

	 So, make sure to include some info to know which env unions reach where (based on stack)


This type of structure allows us to not have to unify stuff like this:

g (f () -> b)
	print f 

^^^^^ without our way to fix it, ALL of the polymorphic call (eg. () -> Int and () -> Bool) would have to have the same environment.

# from my other notes:
##############################################
# Should I resolve in the same step or separately?
# Right now, resolution would add ConID and VarID to the structure.
# These are GLOBAL, so during constraint generation, we don't have to maintain any sort of stack, just a ConID -> Type and VarID -> Type mapping.
# So, we won't have to repeat any of the "stack" motions.

# But, there's also one other thing: resolving impacts typechecking errors. So, I'll have to find a way to remove incorrect typechecking errors due to resolution.
# That's why, I'll put resolution in typechecking right now, due to their need to interact.

###########

# But, is TVar unique? I should maybe assign unique TVar IDs, since an extra resolution before generating constraints. I'm going to make them unique.
